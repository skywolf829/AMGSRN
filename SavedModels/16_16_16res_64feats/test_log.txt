Model was trained with TCNN and TCNN is available.
APMGSRN(
  (encoder): APMG_encoder()
  (decoder): Network(n_input_dims=512, n_output_dims=1, seed=1337, dtype=torch.float16, hyperparams={'encoding': {'offset': 0.0, 'otype': 'Identity', 'scale': 1.0}, 'network': {'activation': 'ReLU', 'n_hidden_layers': 2, 'n_neurons': 64, 'otype': 'FullyFusedMLP', 'output_activation': 'None'}, 'otype': 'NetworkWithInputEncoding'})
)
Extents: 0,768,0,768,0,768
Data: torch.Size([1, 1, 768, 768, 768]) from full extents (1000, 1000, 1000). IO time loading data:  1.5772
Chunk 0,768,0,768,0,768 SSE: 47750.828125
Extents: 0,768,0,768,768,1000
Data: torch.Size([1, 1, 768, 768, 232]) from full extents (1000, 1000, 1000). IO time loading data:  0.5630
Chunk 0,768,0,768,768,1000 SSE: 89.40673828125
Extents: 0,768,768,1000,0,768
Data: torch.Size([1, 1, 768, 232, 768]) from full extents (1000, 1000, 1000). IO time loading data:  0.5720
Chunk 0,768,768,1000,0,768 SSE: 1768.064453125
Extents: 0,768,768,1000,768,1000
Data: torch.Size([1, 1, 768, 232, 232]) from full extents (1000, 1000, 1000). IO time loading data:  0.2595
Chunk 0,768,768,1000,768,1000 SSE: 0.0
Extents: 768,1000,0,768,0,768
Data: torch.Size([1, 1, 232, 768, 768]) from full extents (1000, 1000, 1000). IO time loading data:  0.6052
Chunk 768,1000,0,768,0,768 SSE: 204.78738403320312
Extents: 768,1000,0,768,768,1000
Data: torch.Size([1, 1, 232, 768, 232]) from full extents (1000, 1000, 1000). IO time loading data:  0.2402
Chunk 768,1000,0,768,768,1000 SSE: 360.67974853515625
Extents: 768,1000,768,1000,0,768
Data: torch.Size([1, 1, 232, 232, 768]) from full extents (1000, 1000, 1000). IO time loading data:  0.2390
Chunk 768,1000,768,1000,0,768 SSE: 0.0
Extents: 768,1000,768,1000,768,1000
Data: torch.Size([1, 1, 232, 232, 232]) from full extents (1000, 1000, 1000). IO time loading data:  0.1160
Chunk 768,1000,768,1000,768,1000 SSE: 0.0
MSE: tensor([5.0174e-05], device='cuda:0'), shape [1000, 1000, 1000]
Data min/max: 3.523324358839197e-27/0.5003551840782166
PSNR:  36.981
Traceback (most recent call last):
  File "C:\Users\Sky\Documents\GitHub\AMGSRN\Code\test.py", line 392, in <module>
    perform_tests(model, tests_to_run, opt)
  File "C:\Users\Sky\Documents\GitHub\AMGSRN\Code\test.py", line 359, in perform_tests
    test_throughput(model, opt)
  File "C:\Users\Sky\Documents\GitHub\AMGSRN\Code\test.py", line 257, in test_throughput
    model(input_data)
  File "C:\Users\Sky\miniconda3\envs\AMGSRN\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Sky\miniconda3\envs\AMGSRN\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Sky\Documents\GitHub\AMGSRN\Code\Models\APMGSRN.py", line 265, in forward
    y = self.decoder(feats)
  File "C:\Users\Sky\miniconda3\envs\AMGSRN\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Sky\miniconda3\envs\AMGSRN\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Sky\miniconda3\envs\AMGSRN\lib\site-packages\tinycudann\modules.py", line 189, in forward
    self.params.to(_torch_precision(self.native_tcnn_module.param_precision())).contiguous(),
RuntimeError: CUDA error: an illegal memory access was encountered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

